@using global::Model
<div class="card mb-5" style="width: 40rem;">
    <div class="card-body">
        <h3 class="card-title">@GemData.Name</h3>
        <div class="row gy-5">
            <div class="col">
                <h5 class="card-title">Value</h5>
                <p class="card-text">Price Raw: @GemData.RawCost().Round(2)</p>
                <p class="card-text">Worst Case: @GemData.WorstCaseValue().Round(2)</p>
                <p class="card-text">Middle Case: @GemData.MiddleCaseValue().Round(2)</p>
                <p class="card-text">Best Case: @GemData.BestCaseValue().Round(2)</p>
            </div>
            <div class="col">
                <h5 class="card-title">Profit per Try</h5>
                <p class="card-text">Cost: @GemData.CostPerTry(FilterTempleCost()).Round(2)</p>
                <p class="card-text">Worst Case: @GemData.WorstCaseProfit(FilterTempleCost()).Round(2)</p>
                <p class="card-text">Middle Case: @GemData.MiddleCaseProfit(FilterTempleCost()).Round(2)</p>
                <p class="card-text">Best Case: @GemData.BestCaseProfit(FilterTempleCost()).Round(2)</p>
            </div>
            <div class="col d-flex">
                <button class="btn btn-primary align-self-end w-100">+ Value</button>
            </div>
            <div class="col d-flex flex-column justify-content-between">
                <h5 class="card-title">Average Profit per Try</h5>
                <button class="btn btn-outline-secondary align-self-end w-100">@GemData.AvgProfitPerTry(FilterTempleCost()).Round(2)</button>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public GemData GemData { get; set; } = null!;

    [Parameter]
    public TempleCost TempleCost { get; set; } = null!;

    [Parameter]
    public FilterValues FilterValues { get; set; } = null!;

    private decimal FilterTempleCost() { return FilterValues.TempleCost ?? TempleCost.AverageChaosValue(); }
}