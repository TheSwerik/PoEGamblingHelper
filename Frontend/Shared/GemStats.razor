@using global::Model
<div class="card mb-5" style="width: 45rem;">
    <div class="card-body">
        <h3 class="card-title">
            <img src="@GemData.Icon" alt="Gem-Icon" class="icon"/>@GemData.Name
        </h3>
        <div class="row gy-5">
            <div class="col">
                <h5 class="card-title">Value</h5>
                <p class="card-text">
                    <a href="@TradeUrl(GemData.RawGem())" target="_blank" rel="noopener noreferrer">Price Raw: @CurrencyValue(GemData.RawCost())</a>
                </p>
                <p class="card-text">
                    <a href="@TradeUrl(GemData.ResultGem(ResultCase.Worst))" target="_blank" rel="noopener noreferrer">Worst Case: @CurrencyValue(GemData.Value(ResultCase.Worst))</a>
                </p>
                <p class="card-text">
                    <a href="@TradeUrl(GemData.ResultGem(ResultCase.Middle))" target="_blank" rel="noopener noreferrer">Middle Case: @CurrencyValue(GemData.Value(ResultCase.Middle))</a>
                </p>
                <p class="card-text">
                    <a href="@TradeUrl(GemData.ResultGem(ResultCase.Best))" target="_blank" rel="noopener noreferrer">Best Case: @CurrencyValue(GemData.Value(ResultCase.Best))</a>
                </p>
            </div>
            <div class="col">
                <h5 class="card-title">Profit per Try</h5>
                <p class="card-text">Cost: @CurrencyValue(GemData.CostPerTry(FilterTempleCost()))</p>
                <p class="card-text">Worst Case: @CurrencyValue(GemData.Profit(ResultCase.Worst, FilterTempleCost()))</p>
                <p class="card-text">Middle Case: @CurrencyValue(GemData.Profit(ResultCase.Middle, FilterTempleCost()))</p>
                <p class="card-text">Best Case: @CurrencyValue(GemData.Profit(ResultCase.Best, FilterTempleCost()))</p>
            </div>
            <div class="col d-flex">
                <button class="btn btn-primary align-self-end w-100">+ Value</button>
            </div>
            <div class="col d-flex flex-column justify-content-between">
                <h5 class="card-title">Average Profit per Try</h5>
                <button class="btn btn-outline-secondary align-self-end w-100" id="avg-profit">@CurrencyValue(GemData.AvgProfitPerTry(FilterTempleCost()))</button>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public GemData GemData { get; set; } = null!;

    [Parameter]
    public TempleCost TempleCost { get; set; } = null!;

    [Parameter]
    public FilterValues FilterValues { get; set; } = null!;

    [Parameter]
    public League CurrentLeague { get; set; } = null!;

    private decimal FilterTempleCost() { return FilterValues.TempleCost ?? TempleCost.AverageChaosValue(); }

    private string TradeUrl(GemTradeData? gemTradeData) { return gemTradeData is null ? "#" : gemTradeData.TradeUrl(CurrentLeague); }

    private string CurrencyValue(decimal chaosValue)
    {
        var currencyChaosValue = FilterValues.CurrencyValue ?? FilterValues.Currency?.ChaosEquivalent ?? 1;
        return (chaosValue / currencyChaosValue).Round(2);
    }

}