@using PoEGamblingHelper3.Shared.Model
@inject HttpClient HttpClient


<div class="sidebar">
    <div class="card">
        <div class="card-header">
            <h4 class="card-title">Data</h4>
        </div>
        <div class="card-body d-flex flex-column w-100">
            <div class="row justify-content-between">
                <p class="w-75">
                    Last Update from PoENinja
                </p>
                <p class="w-25 text-end">
                    just now
                </p>
            </div>
            <div class="row justify-content-between">
                <p class="w-75">
                    Temple Cost
                </p>
                <p class="w-25 text-end">
                    187
                </p>
            </div>
            <div class="row justify-content-between">
                <p class="w-75">
                    Chaos per Divine
                </p>
                <p class="w-25 text-end">
                    210
                </p>
            </div>
        </div>
    </div>
    <EditForm Model="@FilterValues" class="d-flex flex-column w-100 h-100 justify-content-evenly align-items-center">
        <BlazoredTypeahead SearchMethod="@Search"
                           EnableDropDown="true"
                           @bind-Value="@FilterValues.Gem"
                           Context="search"
                           placeholder="Search...">
            <SelectedTemplate>
                @search.Name
            </SelectedTemplate>
            <ResultTemplate>
                @search.Name
            </ResultTemplate>
        </BlazoredTypeahead>

        <div class="dropdown w-100 d-flex justify-content-between align-items-center">
            <label for="sort">Sort:</label>
            <button class="btn btn-secondary dropdown-toggle w-75" type="button" data-bs-toggle="dropdown" aria-expanded="false" id="sort">
                @(FilterValues.Sort is null ? "Nothing Selected" : FilterValues.Sort)
            </button>
            <ul class="dropdown-menu">
                @foreach (var sort in Enum.GetValues<Sort>())
                {
                    <li>
                        <a class="dropdown-item" @onclick="() => FilterValues.Sort = sort">@sort</a>
                    </li>
                }
            </ul>
        </div>

        <div class="dropdown w-100">
            <button class="btn btn-secondary dropdown-toggle w-100" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                Gemtypes
            </button>
            <ul class="dropdown-menu w-100" @onclick:stopPropagation="true" @onclick:preventDefault="true">
                @foreach (var type in Enum.GetValues<GemType>())
                {
                    <div onclick="event.stopPropagation()">
                        <li class="ps-2 pe-2 w-100">
                            <input class="form-check-input me-1"
                                   type="checkbox"
                                   id="select-@type"
                                   value="@FilterValues.GemTypes.Contains(type)"
                                   @onclick="() => ToggleGemType(type)">
                            <label class="form-check-label" for="select-@type" @onclick="() => ToggleGemType(type)">
                                @type
                            </label>
                        </li>
                    </div>
                }
            </ul>
        </div>

        <div class="card w-100">
            <div class="card-header d-flex">
                price per try
            </div>
            <div class="card-body d-flex flex-column justify-content-between" style="height: 20vh">
                <div class="d-flex justify-content-center w-100">
                    <div class="form-check form-switch">
                        <label class="form-check-label" for="flexSwitchCheckDefault">Only show profitable</label>
                        <input class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckDefault">
                    </div>
                </div>
                <div class="d-flex justify-content-between">
                    <div class="input-group form-floating">
                        <input type="number"
                               id="priceFrom"
                               class="form-control"
                               placeholder="from"
                               min="0"
                               max="@FilterValues.PricePerTryTo"
                               @bind-value="FilterValues.PricePerTryFrom"/>
                        <label for="priceFrom">from</label>
                        <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">c</button>
                        <ul class="dropdown-menu">
                            <li>
                                <a class="dropdown-item" href="#">c</a>
                            </li>
                            <li>
                                <a class="dropdown-item" href="#">div</a>
                            </li>
                        </ul>
                    </div>
                </div>
                <div class="d-flex justify-content-between">
                    <div class="input-group form-floating">
                        <input type="number"
                               id="priceTo"
                               class="form-control"
                               placeholder="from"
                               min="@FilterValues.PricePerTryFrom"
                               max="2100000000"
                               @bind-value="FilterValues.PricePerTryTo"/>
                        <label for="priceTo">from</label>
                        <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">c</button>
                        <ul class="dropdown-menu">
                            <li>
                                <a class="dropdown-item" href="#">c</a>
                            </li>
                            <li>
                                <a class="dropdown-item" href="#">div</a>
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
</div>

@code {

    [Parameter]
    public IEnumerable<Gem> Gems { get; set; }

    public FilterValues FilterValues { get; set; } = new();
    public Gem Gem { get; set; }
    public string SelectedInt { get; set; } = "nothing selected";

    private async Task<IEnumerable<Gem>> Search(string searchText)
    {
        var response = new[] { new Gem { Name = "test-name" } };
        return response;
    }

    private void ToggleGemType(GemType type)
    {
        if (FilterValues.GemTypes.Contains(type)) FilterValues.GemTypes.Remove(type);
        else FilterValues.GemTypes.Add(type);
    }

}