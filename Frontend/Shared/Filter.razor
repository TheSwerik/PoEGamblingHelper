@using PoEGamblingHelper3.Shared.Model
@inject HttpClient HttpClient


<div class="card">
    <EditForm Model="@FilterValues" class="card-body d-flex justify-content-between">
        <BlazoredTypeahead SearchMethod="@Search"@bind-Value="@FilterValues.Gem" Context="search">
            <SelectedTemplate>
                @search.Name
            </SelectedTemplate>
            <ResultTemplate>
                @search.Name
            </ResultTemplate>
        </BlazoredTypeahead>
        <div class="dropdown">
            <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                @(FilterValues.Sort is null ? "Nothing Selected" : FilterValues.Sort)
            </button>
            <ul class="dropdown-menu">
                @foreach (var sort in Enum.GetValues<Sort>())
                {
                    <li>
                        <a class="dropdown-item" @onclick="() => FilterValues.Sort = sort">@sort</a>
                    </li>
                }
            </ul>
        </div>
        <div class="card">
            <div class="card-header d-flex">
                price per try
            </div>
            <div class="card-body d-flex">
                <div class="form-floating">
                    <input type="number"
                           id="priceFrom"
                           class="form-control"
                           placeholder="from"
                           min="0"
                           max="@FilterValues.PricePerTryTo"
                           @bind-value="FilterValues.PricePerTryFrom"/>
                    <label for="priceFrom">from</label>
                </div>
                <div class="form-floating">
                    <input type="number"
                           id="priceTo"
                           class="form-control"
                           placeholder="to"
                           min="@FilterValues.PricePerTryFrom"
                           max="2100000000"
                           @bind-value="FilterValues.PricePerTryTo"/>
                    <label for="priceTo">to</label>
                </div>
            </div>
        </div>
        <div class="form-check form-switch">
            <label class="form-check-label" for="flexSwitchCheckDefault">Only show profitable</label>
            <input class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckDefault">
        </div>
    </EditForm>
</div>

@code {

    [Parameter]
    public IEnumerable<Gem> Gems { get; set; }

    public FilterValues FilterValues { get; set; } = new();
    public Gem Gem { get; set; }
    public string SelectedInt { get; set; } = "nothing selected";

    private async Task<IEnumerable<Gem>> Search(string searchText)
    {
        var response = new[] { new Gem { Name = "test-name" } };
        return response;
    }

}