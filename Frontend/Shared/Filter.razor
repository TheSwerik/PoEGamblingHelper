@using PoEGamblingHelper3.Shared.Model
@inject HttpClient HttpClient


<div class="card">
    <div class="card-body d-flex">
        <BlazoredTypeahead SearchMethod="@Search"@bind-Value="@Gem">
            <SelectedTemplate>
                @context.Name
            </SelectedTemplate>
            <ResultTemplate>
                @context.Name
            </ResultTemplate>
        </BlazoredTypeahead>
        <div class="dropdown">
            <button class="btn btn-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                @SelectedInt
            </button>
            <ul class="dropdown-menu">
                @foreach (var sort in Sorts)
                {
                    <li>
                        <a class="dropdown-item" @onclick="() => SelectedInt = sort">@sort</a>
                    </li>
                }
            </ul>
        </div>
        <div class="card">
            <div class="card-header d-flex">
                price per try
            </div>
            <div class="card-body d-flex">
                <div class="form-floating">
                    <input type="number" id="priceFrom" class="form-control" placeholder="from"/>
                    <label for="priceFrom">from</label>
                </div>
                <div class="form-floating">
                    <input type="number" id="priceTo" class="form-control" placeholder="to"/>
                    <label for="priceTo">to</label>
                </div>
            </div>
        </div>
        <div class="form-check form-switch">
            <label class="form-check-label" for="flexSwitchCheckDefault">Only show profitable</label>
            <input class="form-check-input" type="checkbox" role="switch" id="flexSwitchCheckDefault">
        </div>
    </div>
</div>

@code {

    [Parameter]
    public IEnumerable<Gem> Gems { get; set; }

    public Gem Gem { get; set; }
    public IEnumerable<string> Sorts { get; set; } = new[] { "PricePerTryAsc", "PricePerTryDesc", "ProfitPerTryAsc", "ProfitPerTryDesc", "MaxProfitPerTryAsc", "MaxProfitPerTryDesc" };
    public string SelectedInt { get; set; } = "nothing selected";

    private async Task<IEnumerable<Gem>> Search(string searchText)
    {
        var response = new[] { new Gem { Name = "test-name" } };
        return response;
    }

}