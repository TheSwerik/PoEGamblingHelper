// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PoEGamblingHelper.Infrastructure.Database;

#nullable disable

namespace PoEGamblingHelper.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PoEGamblingHelper.Domain.Entity.Abstract.Entity<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Entity<Guid>");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Entity<Guid>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("PoEGamblingHelper.Domain.Entity.Abstract.Entity<long>", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Entity<long>");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Entity<long>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("PoEGamblingHelper.Domain.Entity.Abstract.Entity<string>", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Entity<string>");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Entity<string>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("PoEGamblingHelper.Domain.Entity.Analytics.AnalyticsDay", b =>
                {
                    b.HasBaseType("PoEGamblingHelper.Domain.Entity.Abstract.Entity<System.Guid>");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<long>("Views")
                        .HasColumnType("bigint");

                    b.HasDiscriminator().HasValue("AnalyticsDay");
                });

            modelBuilder.Entity("PoEGamblingHelper.Domain.Entity.Analytics.View", b =>
                {
                    b.HasBaseType("PoEGamblingHelper.Domain.Entity.Abstract.Entity<System.Guid>");

                    b.Property<byte[]>("IpHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<DateOnly>("TimeStamp")
                        .HasColumnType("date");

                    b.HasDiscriminator().HasValue("View");
                });

            modelBuilder.Entity("PoEGamblingHelper.Domain.Entity.Gem.GemData", b =>
                {
                    b.HasBaseType("PoEGamblingHelper.Domain.Entity.Abstract.Entity<System.Guid>");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("GemData");
                });

            modelBuilder.Entity("PoEGamblingHelper.Domain.Entity.League", b =>
                {
                    b.HasBaseType("PoEGamblingHelper.Domain.Entity.Abstract.Entity<System.Guid>");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Entity<Guid>", t =>
                        {
                            t.Property("Name")
                                .HasColumnName("League_Name");
                        });

                    b.HasDiscriminator().HasValue("League");
                });

            modelBuilder.Entity("PoEGamblingHelper.Domain.Entity.Stats.Result", b =>
                {
                    b.HasBaseType("PoEGamblingHelper.Domain.Entity.Abstract.Entity<System.Guid>");

                    b.Property<string>("CurrencyResultId")
                        .HasColumnType("text");

                    b.Property<decimal>("CurrencyValue")
                        .HasColumnType("numeric");

                    b.Property<long>("GemTradeDataId")
                        .HasColumnType("bigint");

                    b.HasIndex("CurrencyResultId");

                    b.HasIndex("GemTradeDataId");

                    b.HasDiscriminator().HasValue("Result");
                });

            modelBuilder.Entity("PoEGamblingHelper.Domain.Entity.TempleCost", b =>
                {
                    b.HasBaseType("PoEGamblingHelper.Domain.Entity.Abstract.Entity<System.Guid>");

                    b.Property<decimal[]>("ChaosValue")
                        .IsRequired()
                        .HasColumnType("numeric[]");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.ToTable("Entity<Guid>", t =>
                        {
                            t.Property("TimeStamp")
                                .HasColumnName("TempleCost_TimeStamp");
                        });

                    b.HasDiscriminator().HasValue("TempleCost");
                });

            modelBuilder.Entity("PoEGamblingHelper.Domain.Entity.Gem.GemTradeData", b =>
                {
                    b.HasBaseType("PoEGamblingHelper.Domain.Entity.Abstract.Entity<long>");

                    b.Property<decimal>("ChaosValue")
                        .HasColumnType("numeric");

                    b.Property<bool>("Corrupted")
                        .HasColumnType("boolean");

                    b.Property<string>("DetailsId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("DivineValue")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ExaltedValue")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("GemDataId")
                        .HasColumnType("uuid");

                    b.Property<int>("GemLevel")
                        .HasColumnType("integer");

                    b.Property<int>("GemQuality")
                        .HasColumnType("integer");

                    b.Property<int>("ListingCount")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("GemDataId");

                    b.HasDiscriminator().HasValue("GemTradeData");
                });

            modelBuilder.Entity("PoEGamblingHelper.Domain.Entity.Currency", b =>
                {
                    b.HasBaseType("PoEGamblingHelper.Domain.Entity.Abstract.Entity<string>");

                    b.Property<decimal>("ChaosEquivalent")
                        .HasColumnType("numeric");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Currency");
                });

            modelBuilder.Entity("PoEGamblingHelper.Domain.Entity.Stats.CurrencyResult", b =>
                {
                    b.HasBaseType("PoEGamblingHelper.Domain.Entity.Abstract.Entity<string>");

                    b.Property<decimal>("ChaosEquivalent")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("Entity<string>", t =>
                        {
                            t.Property("ChaosEquivalent")
                                .HasColumnName("CurrencyResult_ChaosEquivalent");

                            t.Property("Name")
                                .HasColumnName("CurrencyResult_Name");
                        });

                    b.HasDiscriminator().HasValue("CurrencyResult");
                });

            modelBuilder.Entity("PoEGamblingHelper.Domain.Entity.Stats.Result", b =>
                {
                    b.HasOne("PoEGamblingHelper.Domain.Entity.Stats.CurrencyResult", "CurrencyResult")
                        .WithMany()
                        .HasForeignKey("CurrencyResultId");

                    b.HasOne("PoEGamblingHelper.Domain.Entity.Gem.GemTradeData", "GemTradeData")
                        .WithMany()
                        .HasForeignKey("GemTradeDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CurrencyResult");

                    b.Navigation("GemTradeData");
                });

            modelBuilder.Entity("PoEGamblingHelper.Domain.Entity.Gem.GemTradeData", b =>
                {
                    b.HasOne("PoEGamblingHelper.Domain.Entity.Gem.GemData", null)
                        .WithMany("Gems")
                        .HasForeignKey("GemDataId");
                });

            modelBuilder.Entity("PoEGamblingHelper.Domain.Entity.Gem.GemData", b =>
                {
                    b.Navigation("Gems");
                });
#pragma warning restore 612, 618
        }
    }
}
